apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kinoko-takenoko-django
  name: kinoko-takenoko-django
spec:
  # 作成されてから使用可能になるまでの時間
  minReadySeconds: 30
  # Deploymentの更新が停止したことを判断するまでに待つ秒数
  progressDeadlineSeconds: 600
  # 展開するpod数
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: kinoko-takenoko-django
  strategy:
    # rollingUpdate（podの設定変更に際して、順次展開すること）の際に、
    # 何個までreplicas以上のpod数となってよいか、何個までreplicas以下のpod数となってよいかの設定。
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  # podの中に含めるコンテナのリスト
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: kinoko-takenoko-django
    spec:
      containers:
      - name: django
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - image: nginx:latest
        imagePullPolicy: Always
        name: blog-nginx
        ports:
        - containerPort: 80
          protocol: TCP
        volumeMounts:
        - mountPath: /etc/nginx/conf.d
          readOnly: true
          name: nginx-conf
        # 死活監視の設定
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /hello
            port: 80
            scheme: HTTP
          # 30秒経ってから死活監視を始める
          initialDelaySeconds: 30
          periodSeconds: 10
          # 成功の閾値
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 4m
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      volumes:
      - name: nginx-conf
        configMap:
          name: nginx-conf
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
